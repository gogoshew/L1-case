package tasks

import (
	"fmt"
	"math"
	"sync"
)

/*
Дана последовательность чисел: 2,4,6,8,10. Найти сумму их квадратов(2^2+3^2+4^2….)
с использованием конкурентных вычислений.
*/

// Реализуем выполнение данной задачи с помощью WaitGroup

func Task3() {
	const (
		n = 5
	)

	// Создаем массив, который нужно будет обработать
	array := [n]float64{2, 4, 6, 8, 10}

	// Создаем переменную группы ожидания
	var wg sync.WaitGroup

	/*
		Создаем цикл по массиву
		В данном цикле происходит 5 итераций, соответственно кол-ву чисел в массиве.
		Далее в цикле создается 5 горутин, в которых присутствует метод Done, сообщающий,
		что выполнилась задача в WaitGroup.
		После того, как все горутины были созданы, мы выходим из цикла
		и попадаем на метод Wait, который в свою очередь ждет пока выполнятся все задачи из wg.
		То есть ждет пока все числа из массива с помощью math.Pow возведутся в степень
		и просуммируются в переменной sum. Затем, wg закрывается и мы видим результат работы программы.
	*/

	// Переменная для дальнейшего суммирования квадратов чисел последовательности
	sum := 0.0

	for _, value := range array {

		// Будем добавлять по одной задаче в WaitGroup в цикле, чтобы обеспечить гибкость программы
		wg.Add(1)

		go func(value float64) {
			sum += math.Pow(value, 2)
			defer wg.Done()
		}(value)
	}

	wg.Wait()
	fmt.Println(sum)
}
