package tasks

import (
	"fmt"
	"math"
	"sync"
)

/*
Написать программу,
которая конкурентно рассчитает значение квадратов чисел взятых из массива (2,4,6,8,10)
и выведет их квадраты в stdout.
*/

// Реализуем выполнение данной задачи с помощью WaitGroup

func Task2() {
	const (
		n = 5
	)

	// Создаем массив, который нужно будет обработать
	array := [n]float64{2, 4, 6, 8, 10}

	// Создаем переменную группы ожидания
	var wg sync.WaitGroup

	// Добавим в WaitGroup столько задач, сколько чисел в массиве
	wg.Add(n)

	/*
		Создаем цикл по массиву
		В данном цикле происходит 5 итераций, соответственно кол-ву чисел в массиве
		Далее создается 5 горутин, в которых присутствует метод Done, сообщающий,
		что выполнилась задача в WaitGroup.
		После того, как все горутины были созданы, мы выходим из цикла
		и попадаем на метод Wait, который в свою очередь ждет пока выполнятся все задачи из wg
		То есть ждет пока все числа из массива с помощью math.Pow возведутся в степень
		и выведутся в stdout. Затем, wg закрывается и мы видим сообщение "All pows is done!"
	*/

	for _, value := range array {

		go func(value float64) {
			fmt.Println(math.Pow(value, 2))
			wg.Done()
		}(value)
	}

	wg.Wait()
	fmt.Println("All pows is done!")
}
