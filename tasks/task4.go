package tasks

import (
	"fmt"
	"time"
)

/*
Реализовать постоянную запись данных в канал (главный поток). Реализовать набор из N воркеров,
которые читают произвольные данные из канала и выводят в stdout.
Необходима возможность выбора количества воркеров при старте.

Программа должна завершаться по нажатию Ctrl+C. Выбрать и обосновать способ завершения работы всех воркеров.
*/

func Task4() {
	var Workers int
	fmt.Println("Введите количество воркеров: ")
	fmt.Scanf("%d\n", &Workers)

	// Создадим небуфферизированный канал, поскольку reader будет сразу читать значение, которое записывает writer
	workChan := make(chan int)

	// Цикл который производит столько итераций, сколько вводит пользователь
	// Каждую итерацию активируется горутина, которая читает данные из канала и выводит в stdout
	for i := 1; i <= Workers; i++ {
		go worker(i, workChan)
	}

	// Бесконечный цикл, который записывает в канал секунды раз в секунду
	for {
		workChan <- time.Now().Second()
		time.Sleep(time.Second)
	}
}

// Функция воркер, принимает имя воркера и канал на чтение
func worker(name int, readerChan <-chan int) {
	for {
		timeSec := <-readerChan
		fmt.Printf("Воркер %d получил данные: %d\n", name, timeSec)
	}
}
